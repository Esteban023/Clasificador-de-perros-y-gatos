# -*- coding: utf-8 -*-
"""cats_vs_dogs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FVbYhSrH5eYAnVSNB_EwM6feRfVNlC_p
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

datos, metadatos = tfds.load("cats_vs_dogs", as_supervised=True, with_info=True)

tfds.show_examples(datos["train"], metadatos)

import cv2 #transformar imagenes

img_size = 100
plt.figure(figsize=(20,20))

for i, (imagen, etiqueta) in enumerate(datos["train"].take(25)):
  imagen = cv2.resize(imagen.numpy(), (img_size, img_size))
  imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)
  plt.subplot(5, 5, i + 1)
  plt.imshow(imagen , cmap="gray")

datos_entrenamiento = []

for i, (imagen, etiqueta) in enumerate(datos["train"]):
  imagen = cv2.resize(imagen.numpy(), (img_size, img_size))
  imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)
  imagen = imagen.reshape(img_size, img_size, 1)
  datos_entrenamiento.append([imagen, etiqueta])

#Preparar variables x e y
X = []
y = []

for imagen, etiqueta in datos_entrenamiento:
  X.append(imagen)
  y.append(etiqueta)

#Normalizar imagenes
X = np.array(X).astype(float) / 255
y = np.array(y)

#Capas del modelo
conv_layer_1 = tf.keras.layers.Conv2D(32, (3,3), input_shape = (100,100,1), activation="relu")
pool_layer_1 = tf.keras.layers.MaxPooling2D((2,2))

conv_layer_2 = tf.keras.layers.Conv2D(64, (3,3), activation="relu")
pool_layer_2 = tf.keras.layers.MaxPooling2D((2,2))

conv_layer_3 = tf.keras.layers.Conv2D(128, (3,3), activation="relu")
pool_layer_3 = tf.keras.layers.MaxPooling2D((2,2))

flatten_layer = tf.keras.layers.Flatten()
dense_layer_1 = tf.keras.layers.Dense(100, activation="relu")
dense_layer_2 = tf.keras.layers.Dense(1, activation="sigmoid")
#-----------------------------------------------------------------------------------------------------------
capas = [conv_layer_1, pool_layer_1, conv_layer_2, pool_layer_2, conv_layer_3, pool_layer_3, flatten_layer, dense_layer_1, dense_layer_2]

modelo = tf.keras.Sequential(capas)

modelo.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

modelo.fit(X, y, batch_size=32, validation_split=0.15,epochs=10)

#Sobre ajuste

#Dropout
#MÃ¡s datos

